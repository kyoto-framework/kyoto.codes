"""docsgen - Tool for generating markdown documentation from godoc."""
import json
import pathlib
from collections import defaultdict
from dataclasses import dataclass
from tempfile import gettempdir

from docsgen import tools
from docsgen.docfile import Docfile
from docsgen.repository import Repository


@dataclass
class Arguments:
    """Docsgen tool arguments."""

    repository: Repository
    outpath: pathlib.Path
    tmppath: pathlib.Path | None = None
    prefix: str | None = None


def parse(rawpath: pathlib.Path) -> list[Docfile]:
    """Parse raw documentation into set of docfiles."""
    # Define shortcuts
    def preproc(c: str) -> str:
        c = c.replace("<!-- Code generated by gomarkdoc. DO NOT EDIT -->\n\n", "")
        c = c.replace("\\-", "-")
        c = c.replace("```\npackage", "```go\npackage")
        c = c.replace("```\nfunc", "```go\nfunc")
        c = c.replace("```\n//", "```go\n//")
        c = c.replace("```\n<", "```html\n<")
        return c
    def gettitle(c: str) -> str:
        return c.split("\n")[0].replace("#", "").strip()
    def getdoc(c: str) -> str:
        if not c.startswith("#"):
            return "# " + c
        return c
    # Read raw doc
    with rawpath.open() as f:
        doc = f.read()
    # Separate doc and definitions parts
    doc, docdef = doc.split("##", maxsplit=1)
    # Split doc into chunks
    chunks = doc.split(r"\# ")
    # Preprocess chunks
    chunks = [preproc(c) for c in chunks]
    # Join chunks with the same title prefix
    joins = defaultdict(list[int])
    for i, chunk in enumerate(chunks):
        maintitle = gettitle(chunk).split(" - ")[0]
        joins[maintitle].append(i)
    chunks = [
        "## ".join([
            c.replace(gettitle(c).split(" - ")[0] + " - ", "")
            for i, c in enumerate(chunks)
            if i in indexes
        ])
        for title, indexes in joins.items()
    ]
    # Promote chunks into docfiles
    return [
        Docfile(
            gettitle(c),
            getdoc(c),
        )
        for c in chunks
    ] + [
        Docfile(
            title="Definitions index",
            documentation=docdef,
        ),
    ]


def docsgen(args: Arguments) -> list[str]:
    """Docsgen tool entrypoint."""
    # Defaults
    args.tmppath = args.tmppath or pathlib.Path(gettempdir())
    args.prefix = args.prefix or args.repository.name

    # Define paths
    reppath = (args.tmppath / args.repository.name) \
        if args.repository.is_remote \
        else pathlib.Path(str(args.repository))
    rawpath = args.tmppath / (args.repository.name + ".md")

    # Cleanup paths (if needed)
    tools.clean(args.outpath)
    if args.repository.is_remote:
        tools.clean(reppath)

    # Create paths (if needed)
    if not args.outpath.exists():
        args.outpath.mkdir(parents=True, exist_ok=True)
    
    # Require tools
    tools.require()
    # Clone repo into temporary dir, if remote
    if args.repository.is_remote:
        tools.clone(str(args.repository), reppath)
    # Generate raw docfile
    tools.gomarkdoc(reppath, rawpath)
    # Parse docfiles
    docfiles = parse(rawpath)
    # Set first docfile as index
    docfiles[0].is_index = True
    # Save docfiles
    for docfile in docfiles:
        with (args.outpath / (docfile.filename + ".md")).open("w") as f:
            f.write(docfile.documentation)
    # Generate press menu, as result
    return [
        json.dumps({
            "text": docfile.title if docfile.filename != "index" else "Overview",
            "link": f"/{args.prefix}/{docfile.filename}".replace("//", "/") 
                if docfile.filename != "index" 
                else f"/{args.prefix}",
        }) + ","
        for docfile in docfiles
    ]
